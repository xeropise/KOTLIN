package typeSystem.primitive

fun main() {

    // 코틀린은 한 타입의 숫자를 다른 타입의 숫자로 자동 변환하지 않는다.
    // 결과 타입이 허용하는 숫자의 범위가 원래 타입의 범위보다 넓은 경우조차도 자동 변환은 불가능하다.

    /*

    val i = 1
    val l: Long = i

     */

    // 대신 직접 변환 메소드를 호출해야 한다.
    val i = 1
    val l: Long = i.toLong()

    // 코틀린은 모든 원시타입 (Boolean 제외) 에 대한 양방향 변환 함수를 제공한다.

    // 코틀린은 묵시적 변환을 허용하지 않고, 변환을 직접 명시적으로 해야 한다.
    val x = 1
    println(x.toLong() in listOf(1L,2L, 3L))

    // 숫자 리터럴을 사용할 때는 보통 변환 함수를 호출할 필요가 없다.
    // 42L 이나 42.0f 처럼 상수 뒤에 타입을 표현하는 문자를 붙이면 변환이 필요 없다.
    // 직접 변환하지 않아도, 숫자 리터럴을 타입이 알려진 변수에 대입하거나 함수에게 인자로 넘기면 컴파일러가 필요한 변환을 자동으로 넣어준다.

    fun foo(l: Long) = println(l)

    val b: Byte = 1 // 상수 값은 적절한 타입으로 해석된다.
    val ll = b + 1L  // 산술 연산자는 적당한 타입의 값을 받아들일 수 있게 오버로드되어 있다.
    foo(42) // 컴ㅍ파일러는 42를 Long 값으로 해석한다.
}